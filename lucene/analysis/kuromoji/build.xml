<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="analyzers-kuromoji-ipadic-neologd" default="default" xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    Japanese Morphological Analyzer
  </description>

  <!-- currently whether rat detects this as binary or not
       is platform dependent?! -->
  <property name="rat.excludes" value="**/*.txt,**/bocchan.utf-8"/>
  <property name="rat.additional-includes" value="src/tools/**"/>

  <!-- we don't want to pull in ipadic/naist etc -->
  <property name="ivy.default.configuration" value="default"/>
  <import file="../analysis-module-build.xml"/> 

  <!-- default configuration: uses mecab-ipadic -->
  <property name="ipadic.type" value="ipadic"/>
  <property name="ipadic.version" value="mecab-ipadic-2.7.0-20070801-neologd-${neologd.version}" />

  <!-- alternative configuration: uses mecab-naist-jdic
  <property name="ipadic.type" value="naist"/>
  <property name="ipadic.version" value="mecab-naist-jdic-0.6.3b-20111013" />
  -->
  
  <property name="dict.src.file" value="${ipadic.version}.tar.gz" />
  <property name="dict.src.dir" value="${build.dir}/${ipadic.version}" />
  <property name="dict.encoding" value="utf-8"/>
  <property name="dict.format" value="ipadic"/>
  <property name="dict.normalize" value="false"/>
  <property name="dict.target.dir" location="${resources.dir}"/>

  <!-- properties for neologd -->
  <property name="repo.neologd" value="https://github.com/neologd/mecab-ipadic-neologd.git"/>
  <property name="dict.src.neologd" value="${build.dir}/mecab-ipadic-neologd"/>

  <available type="dir" file="${build.dir}/${ipadic.version}" property="dict.available"/>

  <path id="classpath">
    <pathelement path="${analyzers-common.jar}"/>
    <path refid="base.classpath"/>
  </path>

  <target name="compile-core" depends="jar-analyzers-common, common.compile-core" />
  <target name="download-dict" depends="ivy-availability-check,ivy-fail,ivy-configure" unless="dict.available">
     <ivy:retrieve pattern="${build.dir}/${dict.src.file}" conf="${ipadic.type}" symlink="${ivy.symlink}"/>
     <!-- TODO: we should checksum too -->
     <gunzip src="${build.dir}/${dict.src.file}"/>
     <untar src="${build.dir}/${ipadic.version}.tar" dest="${build.dir}"/>
  </target>

  <macrodef name = "git">
    <attribute name = "command" />
    <attribute name = "dir" default = "" />
    <element name = "args" optional = "true" />
    <sequential>
      <echo message = "git @{command}" />
      <exec executable = "git" dir = "@{dir}">
        <arg value = "@{command}" />
        <args/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name = "git-clone-pull">
    <attribute name = "repository" />
    <attribute name = "dest" />
    <sequential>
      <git command = "clone">
        <args>
          <arg value = "@{repository}" />
          <arg value = "@{dest}" />
        </args>
      </git>
      <git command = "pull" dir = "@{dest}" />
    </sequential>
  </macrodef>


  <path id="tools.dependencies">
    <fileset dir="../icu/lib"/>
  </path>

  <path id="tools.classpath">
    <path refid="classpath"/>
    <path refid="tools.dependencies"/>
    <pathelement location="${build.dir}/classes/java"/>
    <pathelement location="${build.dir}/classes/tools"/>
  </path>

  <path id="tools.test.classpath">
    <path refid="tools.classpath"/>
    <path refid="test.base.classpath"/>
    <pathelement location="${build.dir}/classes/tools-test"/>
  </path>

  <target name="clone-neologd">
    <git-clone-pull repository="${repo.neologd}" dest="${dict.src.neologd}"/>
  </target>

  <target name="pull-neologd">
    <git command="checkout" dir="${dict.src.neologd}">
      <args>
        <arg value="master"/>
      </args>
    </git>
    <git command="pull" dir="${dict.src.neologd}"/>
    <git command="pull" dir="${dict.src.neologd}">
      <args>
        <arg value="--tags"/>
      </args>
    </git>
  </target>

  <target name="checkout-neologd-tag" if="neologd.tag">
    <git command="checkout" dir="${dict.src.neologd}">
      <args>
        <arg value="refs/tags/${neologd.tag}"/>
      </args>
    </git>
  </target>

  <target name="checkout-neologd" depends="pull-neologd, checkout-neologd-tag"/>

  <target name="build-dict-neologd" depends="pull-neologd, checkout-neologd">
    <exec executable="${dict.src.neologd}/libexec/make-mecab-ipadic-neologd.sh">
      <!-- kuromoji does not accept longer than 15 characters for base form -->
      <arg value="-L 15"/>
    </exec>
    <copy todir="${dict.src.dir}">
      <fileset dir="${dict.src.neologd}/build/${ipadic.version}"/>
    </copy>
  </target>

  <target name="build-dict" depends="compile-tools, build-dict-neologd">
    <sequential>
      <delete verbose="true">
        <fileset dir="${resources.dir}/org/apache/lucene/analysis/ja/dict" includes="**/*"/>
      </delete>
      <!-- TODO: optimize the dictionary construction a bit so that you don't need 1G -->
      <java fork="true" failonerror="true" maxmemory="5g" classname="org.apache.lucene.analysis.ja.util.DictionaryBuilder">
        <classpath>
          <path refid="tools.classpath"/>
        </classpath>
        <assertions>
          <enable package="org.apache.lucene"/>
        </assertions>
        <arg value="${dict.format}"/>
        <arg value="${dict.src.dir}"/>
        <arg value="${dict.target.dir}"/>
        <arg value="${dict.encoding}"/>
        <arg value="${dict.normalize}"/>
      </java>
    </sequential>
  </target>

   <!-- we don't actually need to compile this thing, we just want its lib -->
   <target name="resolve-icu">
     <ant dir="../icu/" target="resolve" inheritAll="false">
       <propertyset refid="uptodate.and.compiled.properties"/>
     </ant>
   </target>

  <target name="compile-tools" depends="resolve-icu, compile-core, common.compile-tools">
    <compile
      srcdir="src/tools/java"
      destdir="${build.dir}/classes/tools">
      <classpath>
        <path refid="tools.classpath"/>
      </classpath>
    </compile>
  </target>

  <target name="compile-tools-tests" depends="compile-tools">
    <compile
      srcdir="src/tools/test"
      destdir="${build.dir}/classes/tools-test">
      <classpath>
        <path refid="tools.test.classpath"/>
        <pathelement path="src/tools/test"/>
      </classpath>
     </compile>
  </target>

  <target name="test-tools" depends="compile-tools-tests">
    <test-macro dataDir="src/tools/test" junit.classpath="tools.test.classpath"/>
  </target>

  <target name="compile-test" depends="module-build.compile-test, compile-tools-tests"/>
  <!-- TODO: not until we properly make 'test-tools' work with clover etc
  <target name="test" depends="module-build.test, test-tools"/> -->

  <target name="regenerate" depends="build-dict"/>

</project>
